"""
Script pour g√©n√©rer des donn√©es de feedback d'√©v√©nement universitaire
Future Interns - Task 3: College Event Feedback Analysis
Author: KHALID AG MOHAMED ALY
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

# Configuration
np.random.seed(42)
random.seed(42)

# Nombre de r√©ponses
n_responses = 200

# D√©finir les options
events = ['Tech Conference 2025', 'Career Workshop', 'Cultural Fest', 
          'Entrepreneurship Summit', 'AI & ML Seminar']
event_types = ['Conf√©rence', 'Workshop', 'Culturel', 'S√©minaire', 'Comp√©tition']
departments = ['Computer Science', 'Engineering', 'Business', 'Arts', 'Science', 'Law']
years = ['1st Year', '2nd Year', '3rd Year', '4th Year']
attendance_types = ['Pr√©sentiel', 'Virtuel']

# Commentaires positifs templates
positive_comments = [
    "Excellent √©v√©nement, tr√®s instructif et bien organis√©.",
    "J'ai beaucoup appris, les intervenants √©taient passionnants.",
    "Parfaite organisation, contenu de qualit√© et networking int√©ressant.",
    "Tr√®s inspirant, je recommande vivement cet √©v√©nement.",
    "Super exp√©rience, les sujets abord√©s √©taient pertinents.",
    "Brillant ! Les speakers √©taient experts et accessibles.",
    "Organisation impeccable, contenu riche et diversifi√©.",
    "Fascinant du d√©but √† la fin, tr√®s enrichissant.",
    "Excellente initiative, j'ai d√©couvert de nouvelles perspectives.",
    "Incroyable √©v√©nement, parfaitement adapt√© aux √©tudiants.",
]

# Commentaires neutres templates
neutral_comments = [
    "Bon √©v√©nement dans l'ensemble, quelques aspects √† am√©liorer.",
    "Int√©ressant mais pourrait √™tre plus interactif.",
    "Correct, conforme √† mes attentes g√©n√©rales.",
    "Pas mal, certaines sessions √©taient meilleures que d'autres.",
    "D√©cent, bon contenu mais organisation perfectible.",
    "Satisfaisant, aurait pu √™tre plus dynamique.",
    "Bien mais assez classique, rien d'exceptionnel.",
    "Moyen, certains aspects √©taient int√©ressants.",
    "Ok, conforme √† mes attentes sans grande surprise.",
    "Acceptable, quelques bons moments.",
]

# Commentaires n√©gatifs templates
negative_comments = [
    "D√©cevant, mal organis√© et contenu peu pertinent.",
    "Trop long et ennuyeux, manque de dynamisme.",
    "D√©sorganis√©, mauvaise gestion du temps.",
    "Pas √† la hauteur des attentes, speakers peu engageants.",
    "Mauvaise organisation, probl√®mes techniques r√©currents.",
    "Contenu superficiel, manque de profondeur.",
    "√âv√©nement mal planifi√©, beaucoup de temps perdu.",
    "Peu int√©ressant, pas assez interactif.",
    "D√©cevant compar√© √† l'ann√©e derni√®re.",
    "Mauvaise qualit√© audio, difficile de suivre.",
]

# Suggestions d'am√©lioration templates
improvements = [
    "Am√©liorer la gestion du temps, certaines sessions √©taient trop longues.",
    "Plus d'interactivit√© et de sessions pratiques seraient appr√©ci√©es.",
    "Meilleure coordination et communication avant l'√©v√©nement.",
    "Lieu plus spacieux, il y avait trop de monde.",
    "Am√©liorer la qualit√© technique (audio, vid√©o).",
    "Plus de pauses entre les sessions.",
    "Diversifier les sujets et les formats de pr√©sentation.",
    "Meilleure signal√©tique et orientation sur place.",
    "Nourriture de meilleure qualit√©.",
    "Plus de temps pour le networking.",
    "Sessions plus courtes et plus dynamiques.",
    "Meilleure s√©lection des intervenants.",
]

def generate_ratings(overall_sentiment):
    """G√©n√®re des notes coh√©rentes bas√©es sur le sentiment global"""
    if overall_sentiment == 'positive':
        base = 4
        variance = 1
    elif overall_sentiment == 'neutral':
        base = 3
        variance = 1
    else:  # negative
        base = 2
        variance = 1
    
    ratings = {
        'Overall': min(5, max(1, int(np.random.normal(base, variance/2)))),
        'Venue': min(5, max(1, int(np.random.normal(base, variance/2)))),
        'Organization': min(5, max(1, int(np.random.normal(base, variance/2)))),
        'Content': min(5, max(1, int(np.random.normal(base, variance/2)))),
        'Speaker': min(5, max(1, int(np.random.normal(base, variance/2))))
    }
    
    return ratings

def get_comment(overall_rating):
    """S√©lectionne un commentaire bas√© sur la note globale"""
    if overall_rating >= 4:
        return random.choice(positive_comments)
    elif overall_rating >= 3:
        return random.choice(neutral_comments)
    else:
        return random.choice(negative_comments)

# G√©n√©rer le dataset
data = []

# Date de l'√©v√©nement (il y a 1 semaine)
event_date = datetime.now() - timedelta(days=7)

for i in range(n_responses):
    # Timestamp de la r√©ponse (entre le jour de l'√©v√©nement et maintenant)
    days_after = random.randint(0, 7)
    hours_after = random.randint(0, 23)
    timestamp = event_date + timedelta(days=days_after, hours=hours_after)
    
    # S√©lectionner des attributs al√©atoires
    event_name = random.choice(events)
    event_type = random.choice(event_types)
    department = random.choice(departments)
    year = random.choice(years)
    attendance = random.choice(attendance_types)
    
    # D√©terminer le sentiment global (70% positif, 20% neutre, 10% n√©gatif)
    sentiment_rand = random.random()
    if sentiment_rand < 0.70:
        sentiment = 'positive'
    elif sentiment_rand < 0.90:
        sentiment = 'neutral'
    else:
        sentiment = 'negative'
    
    # G√©n√©rer les notes
    ratings = generate_ratings(sentiment)
    
    # Recommandation bas√©e sur la note globale
    would_recommend = 'Oui' if ratings['Overall'] >= 3 else 'Non'
    
    # G√©n√©rer les commentaires
    liked_most = get_comment(ratings['Overall'])
    
    # Suggestions d'am√©lioration (plus fr√©quentes pour notes basses)
    if ratings['Overall'] <= 3 or random.random() < 0.4:
        improvements_text = random.choice(improvements)
    else:
        improvements_text = "Rien de particulier, tout √©tait bien." if random.random() < 0.5 else random.choice(improvements)
    
    # Commentaires additionnels (optionnels, 50% de chance)
    if random.random() < 0.5:
        additional = "Merci pour cet √©v√©nement !" if sentiment == 'positive' else \
                    "Continuez vos efforts." if sentiment == 'neutral' else \
                    "Beaucoup √† am√©liorer."
    else:
        additional = ""
    
    # Ajouter l'enregistrement
    data.append({
        'Timestamp': timestamp.strftime('%Y-%m-%d %H:%M:%S'),
        'Student ID': f'STU{str(i+1).zfill(4)}',
        'Event Name': event_name,
        'Event Type': event_type,
        'Overall Rating': ratings['Overall'],
        'Venue Rating': ratings['Venue'],
        'Organization Rating': ratings['Organization'],
        'Content Rating': ratings['Content'],
        'Speaker Rating': ratings['Speaker'],
        'Would Recommend': would_recommend,
        'What did you like most?': liked_most,
        'What could be improved?': improvements_text,
        'Additional Comments': additional,
        'Department': department,
        'Year': year,
        'Attendance': attendance
    })

# Cr√©er le DataFrame
df = pd.DataFrame(data)

# Trier par timestamp
df = df.sort_values('Timestamp').reset_index(drop=True)

# Sauvegarder le dataset
output_path = '../data/event_feedback.csv'
df.to_csv(output_path, index=False)

print("‚úÖ Dataset de feedback d'√©v√©nement g√©n√©r√© avec succ√®s!")
print(f"üìä Nombre de r√©ponses: {len(df)}")
print(f"üìÅ Fichier sauvegard√©: {output_path}")

print(f"\nüìã Aper√ßu des donn√©es:")
print(df.head(10))

print(f"\nüìä STATISTIQUES GLOBALES")
print("="*70)
print(f"üìÖ P√©riode de feedback: {df['Timestamp'].min()} √† {df['Timestamp'].max()}")
print(f"‚≠ê Note moyenne globale: {df['Overall Rating'].mean():.2f}/5.0")
print(f"üëç Taux de recommandation: {(df['Would Recommend'] == 'Oui').sum() / len(df) * 100:.1f}%")

print(f"\nüìä DISTRIBUTION DES NOTES")
print("="*70)
print("\nNote Globale:")
print(df['Overall Rating'].value_counts().sort_index())

print("\nüìä R√âPARTITION")
print("="*70)
print("\nüéì Par D√©partement:")
print(df['Department'].value_counts())

print("\nüìö Par Ann√©e:")
print(df['Year'].value_counts())

print("\nüè¢ Par Type de Participation:")
print(df['Attendance'].value_counts())

print("\nüéØ Par √âv√©nement:")
print(df['Event Name'].value_counts())

# Calculer des statistiques avanc√©es
print(f"\nüìà STATISTIQUES PAR CAT√âGORIE")
print("="*70)
rating_cols = ['Overall Rating', 'Venue Rating', 'Organization Rating', 
               'Content Rating', 'Speaker Rating']
print(df[rating_cols].describe().round(2))

# Identifier les r√©ponses positives, neutres et n√©gatives
positive = df[df['Overall Rating'] >= 4]
neutral = df[df['Overall Rating'] == 3]
negative = df[df['Overall Rating'] <= 2]

print(f"\nüòä Feedback Positifs (4-5 √©toiles): {len(positive)} ({len(positive)/len(df)*100:.1f}%)")
print(f"üòê Feedback Neutres (3 √©toiles): {len(neutral)} ({len(neutral)/len(df)*100:.1f}%)")
print(f"üòû Feedback N√©gatifs (1-2 √©toiles): {len(negative)} ({len(negative)/len(df)*100:.1f}%)")

# Cr√©er un fichier d'information
info_text = f"""
# Dataset Information - College Event Feedback

## Overview
- **Total Responses**: {len(df)}
- **Response Period**: {df['Timestamp'].min()} to {df['Timestamp'].max()}
- **Events**: {df['Event Name'].nunique()}
- **Departments**: {df['Department'].nunique()}
- **Academic Years**: {df['Year'].nunique()}

## Key Metrics
- **Average Overall Rating**: {df['Overall Rating'].mean():.2f}/5.0
- **Recommendation Rate**: {(df['Would Recommend'] == 'Oui').sum() / len(df) * 100:.1f}%
- **Positive Feedback**: {len(positive)} ({len(positive)/len(df)*100:.1f}%)
- **Neutral Feedback**: {len(neutral)} ({len(neutral)/len(df)*100:.1f}%)
- **Negative Feedback**: {len(negative)} ({len(negative)/len(df)*100:.1f}%)

## Columns Description
1. **Timestamp**: Date and time of response submission
2. **Student ID**: Anonymous student identifier
3. **Event Name**: Name of the event attended
4. **Event Type**: Type of event (Conference, Workshop, etc.)
5. **Overall Rating**: Overall satisfaction rating (1-5 stars)
6. **Venue Rating**: Rating of the venue/location (1-5)
7. **Organization Rating**: Rating of event organization (1-5)
8. **Content Rating**: Rating of content quality (1-5)
9. **Speaker Rating**: Rating of speaker/presenter (1-5)
10. **Would Recommend**: Whether student would recommend (Yes/No)
11. **What did you like most?**: Open-ended positive feedback
12. **What could be improved?**: Open-ended suggestions
13. **Additional Comments**: Any additional comments (optional)
14. **Department**: Student's academic department
15. **Year**: Student's year of study
16. **Attendance**: Type of participation (In-person/Virtual)

## Data Quality
- No missing values in required fields
- Ratings range from 1 to 5
- Realistic distribution of sentiments
- Coherent feedback patterns

## Usage
Perfect for:
- Sentiment analysis practice
- NLP text processing
- Survey data analysis
- Event feedback evaluation
- Improvement recommendations
"""

with open('../data/feedback_dataset_info.txt', 'w') as f:
    f.write(info_text)

print("\nüìÑ Informations du dataset sauvegard√©es: ../data/feedback_dataset_info.txt")
print("\nüéâ PROCESSUS TERMIN√â!")
